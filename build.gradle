//group 'com.marklogic'
//version '1.0-SNAPSHOT'

plugins {
    id "com.marklogic.ml-gradle" version "2.2.0"
}

repositories {
    jcenter()

    // Needed for mlcp dependencies
    maven { url "https://developer.marklogic.com/maven2/" }

    // Needed for hadoop dependencies for mlcp
    maven { url "http://repository.cloudera.com/artifactory/cloudera-repos/" }
}

configurations {
    mlcp
}


apply plugin: "java"
apply plugin: "eclipse"

//
// These are some tasks to load the example data
//
dependencies {
    mlcp "com.marklogic:mlcp:8.0-5"

    /**
     * If you need to import delimited text, be sure to include this dependency as well.
     */
    mlcp "org.apache.commons:commons-csv:1.2"

    /**
     * mlcp uses Log4j for logging, and if Log4j can't find a configuration file, it will complain and you'll
     * get none of mlcp's usually-useful logging. It is recommended then that your Gradle configuration for
     * mlcp include a directory or some other resource that provides a log4j.properties file.
     */
    mlcp files("lib")
}

/**
 * Example of using MlcpTask to import data with mlcp.
 */
task importPatientsDoc(type: com.marklogic.gradle.task.MlcpTask) {
    classpath = configurations.mlcp
    command = "IMPORT"
    database = mlAppConfig.contentDatabaseName
    input_file_path = "data"
    input_file_type = "delimited_text"
    input_file_pattern = "patientdocuments\\.csv"
    output_collections = "patients"
    output_permissions = "rest-reader,read,rest-writer,update"
    output_uri_prefix = "/patients/"
    delimited_uri_id = "PATIENT_ID"
    args = ["-output_uri_suffix", ".xml"]
}

task importPatientDeployment(type: com.marklogic.gradle.task.MlcpTask) {
    classpath = configurations.mlcp
    command = "IMPORT"
    database = mlAppConfig.contentDatabaseName
    input_file_path = "data"
    input_file_type = "delimited_text"
    input_file_pattern = "PatientDeploy\\.csv"
    output_collections = "patients-deploy"
    output_permissions = "rest-reader,read,rest-writer,update"
    output_uri_prefix = "/patient-deployments/"
    delimited_uri_id = "PATIENT_DEPLOYMENT_ID"
    args = ["-output_uri_suffix", ".xml"]
}

task importDeployLocation(type: com.marklogic.gradle.task.MlcpTask) {
    classpath = configurations.mlcp
    command = "IMPORT"
    database = mlAppConfig.contentDatabaseName
    input_file_path = "data"
    input_file_type = "delimited_text"
    input_file_pattern = "DeployLoc\\.csv"
    output_collections = "deploy-location"
    output_permissions = "rest-reader,read,rest-writer,update"
    output_uri_prefix = "/locations/"
    delimited_uri_id = "ID"
    args = ["-output_uri_suffix", ".xml"]
}

task importEncounter(type: com.marklogic.gradle.task.MlcpTask) {
    classpath = configurations.mlcp
    command = "IMPORT"
    port = 8700
    database = mlAppConfig.contentDatabaseName
    input_file_path = "data"
    input_file_type = "delimited_text"
    input_file_pattern = "Encounter\\.csv"
    output_collections = "encounter"
    output_permissions = "rest-reader,read,rest-writer,update"
    output_uri_prefix = "/encounter/"
    delimited_uri_id = "ENCOUNTER_ID"
    args = ["-output_uri_suffix", ".xml", "-transform_module", "/ext/transforms/transform-encounter.xqy",
        "-transform_namespace", "http://marklogic.com/dha/example/transform-encounter"]
}

task importExampleOnto(type: com.marklogic.gradle.task.MlcpTask) {
    classpath = configurations.mlcp
    command = "IMPORT"
    database = mlAppConfig.contentDatabaseName
    input_file_path = "data/rdf"
    input_file_type = "rdf"
    input_file_pattern = "example\\.rdf"
    output_permissions = "rest-reader,read,rest-writer,update"
}

task importQudt(type: com.marklogic.gradle.task.MlcpTask) {
    classpath = configurations.mlcp
    command = "IMPORT"
    database = mlAppConfig.contentDatabaseName
    input_file_path = "data/rdf"
    input_file_type = "rdf"
    input_file_pattern = "qudt\\.rdf"
    output_permissions = "rest-reader,read,rest-writer,update"
}

task importSkos(type: com.marklogic.gradle.task.MlcpTask) {
    classpath = configurations.mlcp
    command = "IMPORT"
    database = mlAppConfig.contentDatabaseName
    input_file_path = "data/rdf"
    input_file_type = "rdf"
    input_file_pattern = "skos-owl1-dl.rdf"
    output_permissions = "rest-reader,read,rest-writer,update"
}

task exportRawDocs(type: com.marklogic.gradle.task.MlcpTask) {
    classpath = configurations.mlcp
    command = "EXPORT"
    database = mlAppConfig.contentDatabaseName
    output_file_path = "examples"
    args = ["-output_type", "archive", "-collection_filter", "patient-raw,encounter-raw"]
}

task importRawDocs(type: com.marklogic.gradle.task.MlcpTask) {
    classpath = configurations.mlcp
    command = "IMPORT"
    database = mlAppConfig.contentDatabaseName
    input_file_path = "examples"
    args = ["-input_file_type", "archive", "-copy_collections", "true", "-output_permissions",
        "rest-reader,read,rest-writer,update"]
}

task importTransformBase(type: com.marklogic.gradle.task.MlcpTask) {
    classpath = configurations.mlcp
    command = "IMPORT"
    database = mlAppConfig.contentDatabaseName
    input_file_path = "data"
    input_file_type = "rdf"
    input_file_pattern = "transformations.rdf"
    output_permissions = "rest-reader,read,rest-writer,update"
    args = ["-output_graph", "http://dveivr.dha.health.mil/transformations/2016/8/definitions"]

}

task importPatientTransforms(type: com.marklogic.gradle.task.MlcpTask) {
    classpath = configurations.mlcp
    command = "IMPORT"
    database = mlAppConfig.contentDatabaseName
    input_file_path = "data"
    input_file_type = "rdf"
    input_file_pattern = "transformer-patients.rdf"
    output_permissions = "rest-reader,read,rest-writer,update"
    args = ["-output_graph", "http://dveivr.dha.health.mil/transformations/2016/8/patient"]
}

task importPatientCategories(type: com.marklogic.gradle.task.MlcpTask) {
    classpath = configurations.mlcp
    command = "IMPORT"
    database = mlAppConfig.contentDatabaseName
    input_file_path = "data"
    input_file_type = "delimited_text"
    input_file_pattern = "Copy of Patient Category.csv"
    output_collections = "patient-categories"
    output_permissions = "rest-reader,read,rest-writer,update"
}



task importData << {

}

task importTransforms << {

}

importData.dependsOn importDeployLocation
importData.dependsOn importPatientsDoc
importData.dependsOn importPatientDeployment
importData.dependsOn importEncounter

importTransforms.dependsOn importTransformBase
importTransforms.dependsOn importPatientTransforms

importPatientDeployment.mustRunAfter importPatientsDoc
importPatientDeployment.mustRunAfter importDeployLocation
importEncounter.mustRunAfter importPatientsDoc
importPatientTransforms.mustRunAfter importTransformBase



