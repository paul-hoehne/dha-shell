//group 'com.marklogic'
//version '1.0-SNAPSHOT'

plugins {
    id "com.marklogic.ml-gradle" version "2.2.0"
}

repositories {
    jcenter()

    // Needed for mlcp dependencies
    maven { url "https://developer.marklogic.com/maven2/" }

    // Needed for hadoop dependencies for mlcp
    maven { url "http://repository.cloudera.com/artifactory/cloudera-repos/" }
}

configurations {
    mlcp
}


apply plugin: "java"
apply plugin: "eclipse"

//
// These are some tasks to load the example data
//
dependencies {
    mlcp "com.marklogic:mlcp:8.0-5"

    /**
     * If you need to import delimited text, be sure to include this dependency as well.
     */
    mlcp "org.apache.commons:commons-csv:1.2"

    /**
     * mlcp uses Log4j for logging, and if Log4j can't find a configuration file, it will complain and you'll
     * get none of mlcp's usually-useful logging. It is recommended then that your Gradle configuration for
     * mlcp include a directory or some other resource that provides a log4j.properties file.
     */
    mlcp files("lib")
}

/**
 * Example of using MlcpTask to import data with mlcp.
 */
task importPatientsDoc(type: com.marklogic.gradle.task.MlcpTask) {
    classpath = configurations.mlcp
    command = "IMPORT"
    port               = 8700
    database = mlAppConfig.contentDatabaseName
    input_file_path = "data"
    input_file_type = "delimited_text"
    input_file_pattern = "patient_documents\\.csv"
    output_collections = "patients"
    output_permissions = "rest-reader,read,rest-writer,update"
    output_uri_prefix = "/patients/"
    delimited_uri_id = "patient_id"
    args = ["-output_uri_suffix", ".xml", "-transform_module", "/ext/transforms/transform-patient.xqy",
            "-transform_namespace", "http://marklogic.com/dha/example/transform-patient"]
}

task importEncounter(type: com.marklogic.gradle.task.MlcpTask) {
    classpath          = configurations.mlcp
    command            = "IMPORT"
    port               = 8700
    database           = mlAppConfig.contentDatabaseName
    input_file_path    = "data"
    input_file_type    = "delimited_text"
    input_file_pattern = "encounter_documents\\.csv"
    output_collections = "encounter"
    output_permissions = "rest-reader,read,rest-writer,update"
    output_uri_prefix  = "/encounter/"
    delimited_uri_id   = "encounter_id"
    args = ["-output_uri_suffix", ".xml", "-transform_module", "/ext/transforms/transform-encounter.xqy",
        "-transform_namespace", "http://marklogic.com/dha/example/transform-encounter", "-delimiter", "\t"]
}


task importQudt(type: com.marklogic.gradle.task.MlcpTask) {
    classpath = configurations.mlcp
    command = "IMPORT"
    database = mlAppConfig.contentDatabaseName
    input_file_path = "data/rdf"
    input_file_type = "rdf"
    input_file_pattern = "qudt\\.rdf"
    output_permissions = "rest-reader,read,rest-writer,update"
}

task importSkos(type: com.marklogic.gradle.task.MlcpTask) {
    classpath = configurations.mlcp
    command = "IMPORT"
    database = mlAppConfig.contentDatabaseName
    input_file_path = "data/rdf"
    input_file_type = "rdf"
    input_file_pattern = "skos-owl1-dl.rdf"
    output_permissions = "rest-reader,read,rest-writer,update"
}

task importDveivrCore(type: com.marklogic.gradle.task.MlcpTask) {
    classpath = configurations.mlcp
    command = "IMPORT"
    database = mlAppConfig.contentDatabaseName
    input_file_path = "data/rdf/DVEIVR/DVEIVR_2_0"
    input_file_type = "rdf"
    input_file_pattern = "DVEIVR_CORE.rdf"
    output_permissions = "rest-reader,read,rest-writer,update"
}

task importDveivrAnatomy(type: com.marklogic.gradle.task.MlcpTask) {
    classpath = configurations.mlcp
    command = "IMPORT"
    database = mlAppConfig.contentDatabaseName
    input_file_path = "data/rdf/DVEIVR/DVEIVR_2_0"
    input_file_type = "rdf"
    input_file_pattern = "DVEIVR_ANATOMY.rdf"
    output_permissions = "rest-reader,read,rest-writer,update"
}

task importTrauma(type: com.marklogic.gradle.task.MlcpTask) {
    classpath = configurations.mlcp
    command = "IMPORT"
    database = mlAppConfig.contentDatabaseName
    input_file_path = "data/rdf/DVEIVR/DVEIVR_2_0"
    input_file_type = "rdf"
    input_file_pattern = "TRAUMA.rdf"
    output_permissions = "rest-reader,read,rest-writer,update"
}

task importData << {

}

task importOntology << {

}

importData.dependsOn importOntology
importData.dependsOn importPatientsDoc
importData.dependsOn importEncounter

importEncounter.mustRunAfter importPatientsDoc

importOntology.dependsOn importQudt
importOntology.dependsOn importSkos
importOntology.dependsOn importDveivrCore
importOntology.dependsOn importDveivrAnatomy
importOntology.dependsOn importTrauma

importDveivrCore.mustRunAfter importQudt
importDveivrCore.mustRunAfter importSkos
importDveivrAnatomy.mustRunAfter importDveivrCore
importTrauma.mustRunAfter importDveivrCore




