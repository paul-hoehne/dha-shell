//group 'com.marklogic'
//version '1.0-SNAPSHOT'

buildscript {
    if (project.hasProperty('disconnected')) {
        dependencies {
            classpath fileTree(dir: 'ml-gradle-dependencies', include: '*.jar')
        }
    } else {
        repositories {
            jcenter()
        }
        dependencies { classpath mlGradleDependency }
    }
}

apply plugin: "com.marklogic.ml-gradle"

configurations {
    mlcp
    mlDeployer
}

ext {
    mlDeployerDir = "build/ml-deployer"
    mlDeployerGroup = "ML Deployer"
    mlDeployerZipFilename = "ml-deployer.zip"
}

if (project.hasProperty("disconnected")) {
    println("\nOFFLINE MODE")
    dependencies {
        mlcp fileTree(dir: 'mlcp-dependencies', include: "*.jar")
    }
} else {
    repositories {
        jcenter()

        // Needed for mlcp dependencies
        maven { url "https://developer.marklogic.com/maven2/" }

        // Needed for hadoop dependencies for mlcp
        maven { url "http://repository.cloudera.com/artifactory/cloudera-repos/" }
    }

    configurations { mlgradle }

    dependencies {
        mlcp "com.marklogic:mlcp-Hadoop2:1.3-2"
        mlcp "com.marklogic:marklogic-mapreduce2:2.1.5"

        mlgradle mlGradleDependency
    }

    task copyGradleFiles(type: Copy, group: mlDeployerGroup) {
        from "build.gradle", "gradle.properties"
        into mlDeployerDir
    }

    task copyAppModules(type: Copy, group: mlDeployerGroup) {
        from "src/main/ml-modules"
        into mlDeployerDir + "/src/main/ml-modules"
    }

    task copyAppConfig(type: Copy, group: mlDeployerGroup) {
        from "src/main/ml-config"
        into mlDeployerDir + "/src/main/ml-config"
    }

    task copyMlGradleDependencies(type: Copy, group: mlDeployerGroup) {
        from configurations.mlgradle
        into mlDeployerDir + "/ml-gradle-dependencies"
    }

    task copyMlcpDependencies(type: Copy, group: mlDeployerGroup) {
        from configurations.mlcp
        into mlDeployerDir + "/mlcp-dependencies"
    }

    task copyDhaData(type: Copy, group: mlDeployerGroup) {
        from "data"
        into mlDeployerDir + "/data"
    }

    task copyDhaGradleBin(type: Copy, group: mlDeployerGroup) {
        from "gradle-bin"
        into mlDeployerDir + "/gradle-bin"
    }

    task copyDhaScripts(type: Copy, group: mlDeployerGroup) {
        from "pathme.cmd"
        into mlDeployerDir + "/"
    }

    task addDisconnectedToGradleProperties {
        doLast {
            ant.propertyfile(file: "build/ml-deployer/gradle.properties") {
                entry(key: "disconnected", value: "true")
            }
        }
    }

    addDisconnectedToGradleProperties.mustRunAfter copyGradleFiles

    task copyMlDeployerFiles(group: mlDeployerGroup) {
        dependsOn = [
                "copyGradleFiles",
                "copyAppModules",
                "copyAppConfig",
                "copyMlGradleDependencies",
                "copyMlcpDependencies",
                "addDisconnectedToGradleProperties",
                "copyDhaData",
                "copyDhaGradleBin",
                "copyDhaScripts"
        ]
    }

    task deleteMlDeployer(type: Delete, group: mlDeployerGroup) { delete mlDeployerDir, "build/${mlDeployerZipFilename}" }

    task buildMlDeployer (type: Zip, group: mlDeployerGroup) {
        description "Create a zip of this project's Gradle dependencies and source code so that it can be deployer without Internet access"
        dependsOn = ["deleteMlDeployer", "copyMlDeployerFiles"]
        from mlDeployerDir
        into 'ml-deployer'
        destinationDir file('build')
        archiveName mlDeployerZipFilename
    }

    copyMlDeployerFiles.mustRunAfter deleteMlDeployer
}

/**
 * Example of using MlcpTask to import data with mlcp.
 */
task importPatientsDoc(type: com.marklogic.gradle.task.MlcpTask) {
    classpath = configurations.mlcp
    command = "IMPORT"
    port               = 8700
    database = mlAppConfig.contentDatabaseName
    input_file_path = "data"
    input_file_type = "delimited_text"
    input_file_pattern = "patient_documents\\.csv"
    output_collections = "patients"
    output_permissions = "rest-reader,read,rest-writer,update"
    output_uri_prefix = "/patients/"
    args = ["-delimited_uri_id", "patient_id",
            "-output_uri_suffix", ".xml", "-transform_module", "/ext/transforms/transform-patient.xqy",
            "-transform_namespace", "http://marklogic.com/dha/example/transform-patient"]
}

task importEncounter(type: com.marklogic.gradle.task.MlcpTask) {
    classpath          = configurations.mlcp
    command            = "IMPORT"
    port               = 8700
    database           = mlAppConfig.contentDatabaseName
    input_file_path    = "data"
    input_file_type    = "delimited_text"
    input_file_pattern = "encounter_documents\\.csv"
    output_collections = "encounter"
    output_permissions = "rest-reader,read,rest-writer,update"
    output_uri_prefix  = "/encounter/"
    args = ["-delimited_uri_id", "encounter_id", "-output_uri_suffix", ".xml", "-transform_module", "/ext/transforms/transform-encounter.xqy",
        "-transform_namespace", "http://marklogic.com/dha/example/transform-encounter", "-delimiter", "\t"]
}


task importQudt(type: com.marklogic.gradle.task.MlcpTask) {
    classpath = configurations.mlcp
    command = "IMPORT"
    database = mlAppConfig.contentDatabaseName
    input_file_path = "data/rdf"
    input_file_type = "rdf"
    input_file_pattern = "qudt\\.rdf"
    output_permissions = "rest-reader,read,rest-writer,update"
}

task importSkos(type: com.marklogic.gradle.task.MlcpTask) {
    classpath = configurations.mlcp
    command = "IMPORT"
    database = mlAppConfig.contentDatabaseName
    input_file_path = "data/rdf"
    input_file_type = "rdf"
    input_file_pattern = "skos-owl1-dl.rdf"
    output_permissions = "rest-reader,read,rest-writer,update"
}

task importDveivrCore(type: com.marklogic.gradle.task.MlcpTask) {
    classpath = configurations.mlcp
    command = "IMPORT"
    database = mlAppConfig.contentDatabaseName
    input_file_path = "data/rdf/DVEIVR/DVEIVR_2_0"
    input_file_type = "rdf"
    input_file_pattern = "DVEIVR_CORE.rdf"
    output_permissions = "rest-reader,read,rest-writer,update"
}

task importDveivrAnatomy(type: com.marklogic.gradle.task.MlcpTask) {
    classpath = configurations.mlcp
    command = "IMPORT"
    database = mlAppConfig.contentDatabaseName
    input_file_path = "data/rdf/DVEIVR/DVEIVR_2_0"
    input_file_type = "rdf"
    input_file_pattern = "DVEIVR_ANATOMY.rdf"
    output_permissions = "rest-reader,read,rest-writer,update"
}

task importTrauma(type: com.marklogic.gradle.task.MlcpTask) {
    classpath = configurations.mlcp
    command = "IMPORT"
    database = mlAppConfig.contentDatabaseName
    input_file_path = "data/rdf/DVEIVR/DVEIVR_2_0"
    input_file_type = "rdf"
    input_file_pattern = "TRAUMA.rdf"
    output_permissions = "rest-reader,read,rest-writer,update"
}

task exportRawDocs(type: com.marklogic.gradle.task.MlcpTask) {
    classpath = configurations.mlcp
    command = "EXPORT"
    database = mlAppConfig.contentDatabaseName
    output_file_path = "examples"
    args = ["-output_type", "archive", "-collection_filter", "patient-raw,encounter-raw"]
}

task importRawDocs(type: com.marklogic.gradle.task.MlcpTask) {
    classpath = configurations.mlcp
    command = "IMPORT"
    database = mlAppConfig.contentDatabaseName
    input_file_path = "examples"
    input_file_type = "archive"
    args = ["-copy_collections", "true",
            "-output_permissions", "rest-reader,read,rest-writer,update"]
}

task importTransformBase(type: com.marklogic.gradle.task.MlcpTask) {
    classpath = configurations.mlcp
    command = "IMPORT"
    database = mlAppConfig.contentDatabaseName
    input_file_path = "data"
    input_file_type = "rdf"
    input_file_pattern = "transformations.rdf"
    output_permissions = "rest-reader,read,rest-writer,update"
    args = ["-output_graph", "http://dveivr.dha.health.mil/transformations/2016/8/definitions"]

}

task importPatientTransforms(type: com.marklogic.gradle.task.MlcpTask) {
    classpath = configurations.mlcp
    command = "IMPORT"
    database = mlAppConfig.contentDatabaseName
    input_file_path = "data"
    input_file_type = "rdf"
    input_file_pattern = "transformer-patients.rdf"
    output_permissions = "rest-reader,read,rest-writer,update"
    args = ["-output_graph", "http://dveivr.dha.health.mil/transformations/2016/8/patient"]
}

task importPatientCategories(type: com.marklogic.gradle.task.MlcpTask) {
    classpath = configurations.mlcp
    command = "IMPORT"
    database = mlAppConfig.contentDatabaseName
    input_file_path = "data"
    input_file_type = "delimited_text"
    input_file_pattern = "PatientCategoryMapping.csv"
    output_collections = "patient-categories,reference"
    output_permissions = "rest-reader,read,rest-writer,update"
    output_uri_prefix = '/reference/patient-categories/'
    output_uri_suffix =  '.xml'
}

task importData << {

}

task importTransforms << {

}

task importOntology << {

}

importData.dependsOn importOntology
importTransforms.dependsOn importTransformBase
importTransforms.dependsOn importPatientTransforms

importOntology.dependsOn importQudt
importOntology.dependsOn importSkos
importOntology.dependsOn importDveivrCore
importOntology.dependsOn importDveivrAnatomy
importOntology.dependsOn importTrauma

importDveivrCore.mustRunAfter importQudt
importDveivrCore.mustRunAfter importSkos
importDveivrAnatomy.mustRunAfter importDveivrCore
importTrauma.mustRunAfter importDveivrCore




